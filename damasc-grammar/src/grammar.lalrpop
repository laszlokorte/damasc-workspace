use crate::experiment::{
  tokens::Token,
  lexer::LexicalError,
  ast,
};

grammar;

pub Script: Vec<Box<ast::Statement>> = {
  <stmts:Statement*> => stmts
}

pub Statement: Box<ast::Statement> = {
  "var" <name:"identifier"> "=" <value:Expression> ";" => {
    Box::new(ast::Statement::Variable { name, value })
  },
  "print" <value:Expression> ";" => {
    Box::new(ast::Statement::Print { value })
  },
}

pub Expression: Box<ast::Expression> = {
  #[precedence(level="1")]
  Term,

  #[precedence(level="2")] 
  #[assoc(side="left")]
  <l: @L> <lhs:Expression> "*" <rhs:Expression> <r: @R> => {
    Box::new(ast::Expression::BinaryOperation {
      lhs,
      operator: ast::Operator::Mul,
      rhs,
      left: l,
      right: r,
    })
  },
  <l: @L> <lhs:Expression> "/" <rhs:Expression> <r: @R> => {
    Box::new(ast::Expression::BinaryOperation {
      lhs,
      operator: ast::Operator::Div,
      rhs,
      left: l,
      right: r,
    })
  },

  #[precedence(level="3")]
  #[assoc(side="left")]
  <l: @L> <lhs:Expression> "+" <rhs:Expression> <r: @R> => {
    Box::new(ast::Expression::BinaryOperation {
      lhs,
      operator: ast::Operator::Add,
      rhs,
      left: l,
      right: r,
    })
  },

  #[precedence(level="3")]
  #[assoc(side="left")]
  <l: @L> <lhs:Expression> "-" <rhs:Expression> <r: @R> => {
    Box::new(ast::Expression::BinaryOperation {
      lhs,
      operator: ast::Operator::Sub,
      rhs,
      left: l,
      right: r,
    })
  },
}

pub Term: Box<ast::Expression> = {
  <val:"int"> => {
    Box::new(ast::Expression::Integer(val))
  },
  <name:"identifier"> => {
    Box::new(ast::Expression::Variable(name))
  },
  "(" <e:Expression> ")" => e,
}

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "var" => Token::KeywordVar,
    "print" => Token::KeywordPrint,
    "identifier" => Token::Identifier(<String>),
    "int" => Token::Integer(<i64>),
    "(" => Token::LParen,
    ")" => Token::RParen,
    "=" => Token::Assign,
    ";" => Token::Semicolon,
    "+" => Token::OperatorAdd,
    "-" => Token::OperatorSub,
    "*" => Token::OperatorMul,
    "/" => Token::OperatorDiv,
  }
}